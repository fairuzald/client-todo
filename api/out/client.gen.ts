// This file is auto-generated by @hey-api/openapi-ts

import {
  type Config,
  type ClientOptions as DefaultClientOptions,
  createClient,
  createConfig,
} from "@hey-api/client-axios";
import Cookies from "js-cookie";
import type { ClientOptions } from "./types.gen";

const AUTH_COOKIE_NAME = "client_token";

/**
 * The `createClientConfig()` function will be called on client initialization
 * and the returned object will become the client's initial configuration.
 */
export type CreateClientConfig<T extends DefaultClientOptions = ClientOptions> =
  (
    override?: Config<DefaultClientOptions & T>
  ) => Config<Required<DefaultClientOptions> & T>;

// Create initial config with authentication from cookie if available
const getInitialConfig = () => {
  let headers = {};

  // Check for auth token in cookie and add to headers if present
  if (typeof window !== "undefined") {
    const token = Cookies.get(AUTH_COOKIE_NAME);
    if (token) {
      headers = {
        ...headers,
        Authorization: `Bearer ${token}`,
      };
    }
  }

  return createConfig<ClientOptions>({
    baseURL: "http://localhost:8000",
    headers,
    withCredentials: true,
  });
};

export const client = createClient(getInitialConfig());

// Configure global request interceptor
if (typeof window !== "undefined") {
  client.instance.interceptors.request.use(
    (config) => {
      // Get the current token from cookie for each request
      const token = Cookies.get(AUTH_COOKIE_NAME);

      // Only set the token if it exists and it's not already in the config
      if (token && !config.headers.Authorization) {
        config.headers.Authorization = `Bearer ${token}`;
      }

      return config;
    },
    (error) => {
      return Promise.reject(error);
    }
  );
}

export default client;
