// This file is auto-generated by @hey-api/openapi-ts

export type Tag = {
  id: number;
  name: string;
  color: string;
  user_id: number;
  created_at?: Date;
  updated_at?: Date;
};

export type Task = {
  id: number;
  title: string;
  description?: string | null;
  status: "pending" | "in_progress" | "completed";
  due_date?: Date | null;
  priority: "low" | "medium" | "high";
  user_id: number;
  created_at?: Date;
  updated_at?: Date;
  tags?: Array<Tag>;
};

export type User = {
  id: number;
  name: string;
  email: string;
  email_verified_at: Date | null;
  created_at: Date;
  updated_at: Date;
};

export type RegisterUserData = {
  body: {
    name: string;
    email: string;
    password: string;
    password_confirmation: string;
  };
  path?: never;
  query?: never;
  url: "/api/auth/register";
};

export type RegisterUserErrors = {
  /**
   * Validation error
   */
  422: {
    success?: boolean;
    message?: string;
    errors?: {
      [key: string]: unknown;
    };
  };
};

export type RegisterUserError = RegisterUserErrors[keyof RegisterUserErrors];

export type RegisterUserResponses = {
  /**
   * User registered successfully
   */
  201: {
    success?: boolean;
    message?: string;
    data?: User;
  };
};

export type RegisterUserResponse =
  RegisterUserResponses[keyof RegisterUserResponses];

export type LoginUserData = {
  body: {
    email: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: "/api/auth/login";
};

export type LoginUserErrors = {
  /**
   * Invalid credentials
   */
  401: {
    success?: boolean;
    message?: string;
  };
  /**
   * Email not verified
   */
  403: {
    success?: boolean;
    message?: string;
  };
};

export type LoginUserError = LoginUserErrors[keyof LoginUserErrors];

export type LoginUserResponses = {
  /**
   * Login successful
   */
  200: {
    success?: boolean;
    message?: string;
    data?: {
      token?: string;
      user?: User;
    };
  };
};

export type LoginUserResponse = LoginUserResponses[keyof LoginUserResponses];

export type LogoutUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/logout";
};

export type LogoutUserErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
};

export type LogoutUserError = LogoutUserErrors[keyof LogoutUserErrors];

export type LogoutUserResponses = {
  /**
   * Logged out successfully
   */
  200: {
    success?: boolean;
    message?: string;
  };
};

export type LogoutUserResponse = LogoutUserResponses[keyof LogoutUserResponses];

export type GetAuthUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/user";
};

export type GetAuthUserErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
};

export type GetAuthUserError = GetAuthUserErrors[keyof GetAuthUserErrors];

export type GetAuthUserResponses = {
  /**
   * User information retrieved successfully
   */
  200: {
    success?: boolean;
    message?: string;
    data?: User;
  };
};

export type GetAuthUserResponse =
  GetAuthUserResponses[keyof GetAuthUserResponses];

export type VerifyEmailData = {
  body?: never;
  path: {
    /**
     * User ID
     */
    id: number;
    /**
     * Email verification hash
     */
    hash: string;
  };
  query?: never;
  url: "/api/email/verify/{id}/{hash}";
};

export type VerifyEmailErrors = {
  /**
   * Invalid verification link
   */
  400: {
    success?: boolean;
    message?: string;
  };
};

export type VerifyEmailError = VerifyEmailErrors[keyof VerifyEmailErrors];

export type VerifyEmailResponses = {
  /**
   * Email verified successfully
   */
  200: {
    success?: boolean;
    message?: string;
  };
};

export type VerifyEmailResponse =
  VerifyEmailResponses[keyof VerifyEmailResponses];

export type ResendVerificationEmailData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/email/resend";
};

export type ResendVerificationEmailErrors = {
  /**
   * Email already verified
   */
  400: {
    success?: boolean;
    message?: string;
  };
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
};

export type ResendVerificationEmailError =
  ResendVerificationEmailErrors[keyof ResendVerificationEmailErrors];

export type ResendVerificationEmailResponses = {
  /**
   * Verification link sent
   */
  200: {
    success?: boolean;
    message?: string;
  };
};

export type ResendVerificationEmailResponse =
  ResendVerificationEmailResponses[keyof ResendVerificationEmailResponses];

export type ForgotPasswordData = {
  body: {
    email: string;
  };
  path?: never;
  query?: never;
  url: "/api/auth/forgot-password";
};

export type ForgotPasswordErrors = {
  /**
   * Validation error
   */
  422: {
    success?: boolean;
    message?: string;
    errors?: {
      [key: string]: unknown;
    };
  };
};

export type ForgotPasswordError =
  ForgotPasswordErrors[keyof ForgotPasswordErrors];

export type ForgotPasswordResponses = {
  /**
   * Password reset link sent
   */
  200: {
    success?: boolean;
    message?: string;
  };
};

export type ForgotPasswordResponse =
  ForgotPasswordResponses[keyof ForgotPasswordResponses];

export type ResetPasswordData = {
  body: {
    token: string;
    email: string;
    password: string;
    password_confirmation: string;
  };
  path?: never;
  query?: never;
  url: "/api/auth/reset-password";
};

export type ResetPasswordErrors = {
  /**
   * Validation error
   */
  422: {
    success?: boolean;
    message?: string;
    errors?: {
      [key: string]: unknown;
    };
  };
};

export type ResetPasswordError = ResetPasswordErrors[keyof ResetPasswordErrors];

export type ResetPasswordResponses = {
  /**
   * Password reset successfully
   */
  200: {
    success?: boolean;
    message?: string;
  };
};

export type ResetPasswordResponse =
  ResetPasswordResponses[keyof ResetPasswordResponses];

export type GetTagsListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Search tags by name
     */
    search?: string;
    /**
     * Number of tags per page
     */
    per_page?: number;
  };
  url: "/api/tags";
};

export type GetTagsListErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
};

export type GetTagsListError = GetTagsListErrors[keyof GetTagsListErrors];

export type GetTagsListResponses = {
  /**
   * Successful operation
   */
  200: {
    success?: boolean;
    message?: string;
    data?: Array<Tag>;
    pagination?: {
      total?: number;
      per_page?: number;
      current_page?: number;
      last_page?: number;
      from?: number;
      to?: number;
    };
  };
};

export type GetTagsListResponse =
  GetTagsListResponses[keyof GetTagsListResponses];

export type StoreTagData = {
  body: {
    name: string;
    color?: string;
  };
  path?: never;
  query?: never;
  url: "/api/tags";
};

export type StoreTagErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
  /**
   * Validation error
   */
  422: {
    success?: boolean;
    message?: string;
    errors?: {
      [key: string]: unknown;
    };
  };
};

export type StoreTagError = StoreTagErrors[keyof StoreTagErrors];

export type StoreTagResponses = {
  /**
   * Tag created successfully
   */
  201: {
    success?: boolean;
    message?: string;
    data?: Tag;
  };
};

export type StoreTagResponse = StoreTagResponses[keyof StoreTagResponses];

export type DeleteTagData = {
  body?: never;
  path: {
    /**
     * Tag ID
     */
    id: number;
  };
  query?: never;
  url: "/api/tags/{id}";
};

export type DeleteTagErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
  /**
   * Forbidden
   */
  403: {
    success?: boolean;
    message?: string;
  };
  /**
   * Tag not found
   */
  404: {
    success?: boolean;
    message?: string;
  };
  /**
   * Tag is in use
   */
  409: {
    success?: boolean;
    message?: string;
  };
};

export type DeleteTagError = DeleteTagErrors[keyof DeleteTagErrors];

export type DeleteTagResponses = {
  /**
   * Tag deleted successfully
   */
  204: void;
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type GetTagByIdData = {
  body?: never;
  path: {
    /**
     * Tag ID
     */
    id: number;
  };
  query?: never;
  url: "/api/tags/{id}";
};

export type GetTagByIdErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
  /**
   * Forbidden
   */
  403: {
    success?: boolean;
    message?: string;
  };
  /**
   * Tag not found
   */
  404: {
    success?: boolean;
    message?: string;
  };
};

export type GetTagByIdError = GetTagByIdErrors[keyof GetTagByIdErrors];

export type GetTagByIdResponses = {
  /**
   * Successful operation
   */
  200: {
    success?: boolean;
    message?: string;
    data?: Tag;
  };
};

export type GetTagByIdResponse = GetTagByIdResponses[keyof GetTagByIdResponses];

export type UpdateTagData = {
  body: {
    name?: string;
    color?: string;
  };
  path: {
    /**
     * Tag ID
     */
    id: number;
  };
  query?: never;
  url: "/api/tags/{id}";
};

export type UpdateTagErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
  /**
   * Forbidden
   */
  403: {
    success?: boolean;
    message?: string;
  };
  /**
   * Tag not found
   */
  404: {
    success?: boolean;
    message?: string;
  };
  /**
   * Validation error
   */
  422: {
    success?: boolean;
    message?: string;
    errors?: {
      [key: string]: unknown;
    };
  };
};

export type UpdateTagError = UpdateTagErrors[keyof UpdateTagErrors];

export type UpdateTagResponses = {
  /**
   * Tag updated successfully
   */
  200: {
    success?: boolean;
    message?: string;
    data?: Tag;
  };
};

export type UpdateTagResponse = UpdateTagResponses[keyof UpdateTagResponses];

export type GetTasksListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter tasks by status
     */
    status?: "pending" | "in_progress" | "completed";
    /**
     * Filter tasks by priority
     */
    priority?: "low" | "medium" | "high";
    /**
     * Filter tasks by tag ID
     */
    tag_id?: number;
    /**
     * Filter tasks by due date (YYYY-MM-DD)
     */
    due_date?: Date;
    /**
     * Filter overdue tasks (1 for overdue, 0 for not)
     */
    overdue?: 0 | 1;
    /**
     * Search tasks by title or description
     */
    search?: string;
    /**
     * Number of tasks per page
     */
    per_page?: number;
  };
  url: "/api/tasks";
};

export type GetTasksListErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
};

export type GetTasksListError = GetTasksListErrors[keyof GetTasksListErrors];

export type GetTasksListResponses = {
  /**
   * Successful operation
   */
  200: {
    success?: boolean;
    message?: string;
    data?: Array<Task>;
    pagination?: {
      total?: number;
      per_page?: number;
      current_page?: number;
      last_page?: number;
      from?: number;
      to?: number;
    };
  };
};

export type GetTasksListResponse =
  GetTasksListResponses[keyof GetTasksListResponses];

export type StoreTaskData = {
  body: {
    title: string;
    description?: string | null;
    status?: "pending" | "in_progress" | "completed";
    due_date?: Date | null;
    priority?: "low" | "medium" | "high";
    tag_ids?: Array<number>;
  };
  path?: never;
  query?: never;
  url: "/api/tasks";
};

export type StoreTaskErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
  /**
   * Validation error
   */
  422: {
    success?: boolean;
    message?: string;
    errors?: {
      [key: string]: unknown;
    };
  };
};

export type StoreTaskError = StoreTaskErrors[keyof StoreTaskErrors];

export type StoreTaskResponses = {
  /**
   * Task created successfully
   */
  201: {
    success?: boolean;
    message?: string;
    data?: Task;
  };
};

export type StoreTaskResponse = StoreTaskResponses[keyof StoreTaskResponses];

export type DeleteTaskData = {
  body?: never;
  path: {
    /**
     * Task ID
     */
    id: number;
  };
  query?: never;
  url: "/api/tasks/{id}";
};

export type DeleteTaskErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
  /**
   * Forbidden
   */
  403: {
    success?: boolean;
    message?: string;
  };
  /**
   * Task not found
   */
  404: {
    success?: boolean;
    message?: string;
  };
};

export type DeleteTaskError = DeleteTaskErrors[keyof DeleteTaskErrors];

export type DeleteTaskResponses = {
  /**
   * Task deleted successfully
   */
  204: void;
};

export type DeleteTaskResponse = DeleteTaskResponses[keyof DeleteTaskResponses];

export type GetTaskByIdData = {
  body?: never;
  path: {
    /**
     * Task ID
     */
    id: number;
  };
  query?: never;
  url: "/api/tasks/{id}";
};

export type GetTaskByIdErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
  /**
   * Forbidden
   */
  403: {
    success?: boolean;
    message?: string;
  };
  /**
   * Task not found
   */
  404: {
    success?: boolean;
    message?: string;
  };
};

export type GetTaskByIdError = GetTaskByIdErrors[keyof GetTaskByIdErrors];

export type GetTaskByIdResponses = {
  /**
   * Successful operation
   */
  200: {
    success?: boolean;
    message?: string;
    data?: Task;
  };
};

export type GetTaskByIdResponse =
  GetTaskByIdResponses[keyof GetTaskByIdResponses];

export type UpdateTaskData = {
  body: {
    title?: string;
    description?: string | null;
    status?: "pending" | "in_progress" | "completed";
    due_date?: Date | null;
    priority?: "low" | "medium" | "high";
    tag_ids?: Array<number>;
  };
  path: {
    /**
     * Task ID
     */
    id: number;
  };
  query?: never;
  url: "/api/tasks/{id}";
};

export type UpdateTaskErrors = {
  /**
   * Unauthenticated
   */
  401: {
    success?: boolean;
    message?: string;
  };
  /**
   * Forbidden
   */
  403: {
    success?: boolean;
    message?: string;
  };
  /**
   * Task not found
   */
  404: {
    success?: boolean;
    message?: string;
  };
  /**
   * Validation error
   */
  422: {
    success?: boolean;
    message?: string;
    errors?: {
      [key: string]: unknown;
    };
  };
};

export type UpdateTaskError = UpdateTaskErrors[keyof UpdateTaskErrors];

export type UpdateTaskResponses = {
  /**
   * Task updated successfully
   */
  200: {
    success?: boolean;
    message?: string;
    data?: Task;
  };
};

export type UpdateTaskResponse = UpdateTaskResponses[keyof UpdateTaskResponses];

export type ClientOptions = {
  baseURL: "http://localhost/api" | (string & {});
};
