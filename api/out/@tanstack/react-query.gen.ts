// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type { AxiosError } from "axios";
import { client as _heyApiClient } from "../client.gen";
import {
  deleteTag,
  deleteTask,
  forgotPassword,
  getAuthUser,
  getTagById,
  getTagsList,
  getTaskById,
  getTasksList,
  loginUser,
  logoutUser,
  type Options,
  registerUser,
  resendVerificationEmail,
  resetPassword,
  storeTag,
  storeTask,
  updateTag,
  updateTask,
  verifyEmail,
} from "../sdk.gen";
import type {
  DeleteTagData,
  DeleteTagError,
  DeleteTagResponse,
  DeleteTaskData,
  DeleteTaskError,
  DeleteTaskResponse,
  ForgotPasswordData,
  ForgotPasswordError,
  ForgotPasswordResponse,
  GetAuthUserData,
  GetTagByIdData,
  GetTagsListData,
  GetTaskByIdData,
  GetTasksListData,
  LoginUserData,
  LoginUserError,
  LoginUserResponse,
  LogoutUserData,
  LogoutUserError,
  LogoutUserResponse,
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  ResendVerificationEmailData,
  ResendVerificationEmailError,
  ResendVerificationEmailResponse,
  ResetPasswordData,
  ResetPasswordError,
  ResetPasswordResponse,
  StoreTagData,
  StoreTagError,
  StoreTagResponse,
  StoreTaskData,
  StoreTaskError,
  StoreTaskResponse,
  UpdateTagData,
  UpdateTagError,
  UpdateTagResponse,
  UpdateTaskData,
  UpdateTaskError,
  UpdateTaskResponse,
  VerifyEmailData,
} from "../types.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  }
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const registerUserQueryKey = (options: Options<RegisterUserData>) =>
  createQueryKey("registerUser", options);

export const registerUserOptions = (options: Options<RegisterUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await registerUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: registerUserQueryKey(options),
  });
};

export const registerUserMutation = (
  options?: Partial<Options<RegisterUserData>>
) => {
  const mutationOptions: UseMutationOptions<
    RegisterUserResponse,
    AxiosError<RegisterUserError>,
    Options<RegisterUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await registerUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginUserQueryKey = (options: Options<LoginUserData>) =>
  createQueryKey("loginUser", options);

export const loginUserOptions = (options: Options<LoginUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginUserQueryKey(options),
  });
};

export const loginUserMutation = (
  options?: Partial<Options<LoginUserData>>
) => {
  const mutationOptions: UseMutationOptions<
    LoginUserResponse,
    AxiosError<LoginUserError>,
    Options<LoginUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const logoutUserQueryKey = (options?: Options<LogoutUserData>) =>
  createQueryKey("logoutUser", options);

export const logoutUserOptions = (options?: Options<LogoutUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await logoutUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: logoutUserQueryKey(options),
  });
};

export const logoutUserMutation = (
  options?: Partial<Options<LogoutUserData>>
) => {
  const mutationOptions: UseMutationOptions<
    LogoutUserResponse,
    AxiosError<LogoutUserError>,
    Options<LogoutUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await logoutUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthUserQueryKey = (options?: Options<GetAuthUserData>) =>
  createQueryKey("getAuthUser", options);

export const getAuthUserOptions = (options?: Options<GetAuthUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthUserQueryKey(options),
  });
};

export const verifyEmailQueryKey = (options: Options<VerifyEmailData>) =>
  createQueryKey("verifyEmail", options);

export const verifyEmailOptions = (options: Options<VerifyEmailData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await verifyEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: verifyEmailQueryKey(options),
  });
};

export const resendVerificationEmailQueryKey = (
  options?: Options<ResendVerificationEmailData>
) => createQueryKey("resendVerificationEmail", options);

export const resendVerificationEmailOptions = (
  options?: Options<ResendVerificationEmailData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await resendVerificationEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: resendVerificationEmailQueryKey(options),
  });
};

export const resendVerificationEmailMutation = (
  options?: Partial<Options<ResendVerificationEmailData>>
) => {
  const mutationOptions: UseMutationOptions<
    ResendVerificationEmailResponse,
    AxiosError<ResendVerificationEmailError>,
    Options<ResendVerificationEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await resendVerificationEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const forgotPasswordQueryKey = (options: Options<ForgotPasswordData>) =>
  createQueryKey("forgotPassword", options);

export const forgotPasswordOptions = (options: Options<ForgotPasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await forgotPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: forgotPasswordQueryKey(options),
  });
};

export const forgotPasswordMutation = (
  options?: Partial<Options<ForgotPasswordData>>
) => {
  const mutationOptions: UseMutationOptions<
    ForgotPasswordResponse,
    AxiosError<ForgotPasswordError>,
    Options<ForgotPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await forgotPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const resetPasswordQueryKey = (options: Options<ResetPasswordData>) =>
  createQueryKey("resetPassword", options);

export const resetPasswordOptions = (options: Options<ResetPasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await resetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: resetPasswordQueryKey(options),
  });
};

export const resetPasswordMutation = (
  options?: Partial<Options<ResetPasswordData>>
) => {
  const mutationOptions: UseMutationOptions<
    ResetPasswordResponse,
    AxiosError<ResetPasswordError>,
    Options<ResetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await resetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getTagsListQueryKey = (options?: Options<GetTagsListData>) =>
  createQueryKey("getTagsList", options);

export const getTagsListOptions = (options?: Options<GetTagsListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTagsList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTagsListQueryKey(options),
  });
};

export const storeTagQueryKey = (options: Options<StoreTagData>) =>
  createQueryKey("storeTag", options);

export const storeTagOptions = (options: Options<StoreTagData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await storeTag({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: storeTagQueryKey(options),
  });
};

export const storeTagMutation = (options?: Partial<Options<StoreTagData>>) => {
  const mutationOptions: UseMutationOptions<
    StoreTagResponse,
    AxiosError<StoreTagError>,
    Options<StoreTagData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await storeTag({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteTagMutation = (
  options?: Partial<Options<DeleteTagData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteTagResponse,
    AxiosError<DeleteTagError>,
    Options<DeleteTagData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteTag({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getTagByIdQueryKey = (options: Options<GetTagByIdData>) =>
  createQueryKey("getTagById", options);

export const getTagByIdOptions = (options: Options<GetTagByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTagById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTagByIdQueryKey(options),
  });
};

export const updateTagMutation = (
  options?: Partial<Options<UpdateTagData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateTagResponse,
    AxiosError<UpdateTagError>,
    Options<UpdateTagData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateTag({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getTasksListQueryKey = (options?: Options<GetTasksListData>) =>
  createQueryKey("getTasksList", options);

export const getTasksListOptions = (options?: Options<GetTasksListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTasksList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTasksListQueryKey(options),
  });
};

export const storeTaskQueryKey = (options: Options<StoreTaskData>) =>
  createQueryKey("storeTask", options);

export const storeTaskOptions = (options: Options<StoreTaskData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await storeTask({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: storeTaskQueryKey(options),
  });
};

export const storeTaskMutation = (
  options?: Partial<Options<StoreTaskData>>
) => {
  const mutationOptions: UseMutationOptions<
    StoreTaskResponse,
    AxiosError<StoreTaskError>,
    Options<StoreTaskData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await storeTask({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteTaskMutation = (
  options?: Partial<Options<DeleteTaskData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteTaskResponse,
    AxiosError<DeleteTaskError>,
    Options<DeleteTaskData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteTask({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getTaskByIdQueryKey = (options: Options<GetTaskByIdData>) =>
  createQueryKey("getTaskById", options);

export const getTaskByIdOptions = (options: Options<GetTaskByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTaskById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTaskByIdQueryKey(options),
  });
};

export const updateTaskMutation = (
  options?: Partial<Options<UpdateTaskData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateTaskResponse,
    AxiosError<UpdateTaskError>,
    Options<UpdateTaskData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateTask({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
